# -*- coding: utf-8 -*-
"""roomCleaningRobot.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dTVGyM9nIkBaJ8101BiBiBn75ZkdchAd
"""

import numpy as np                                           #import numpy library as np
import random                                                #import random library
m=int(input("Enter the valueof m\n"))                        #input no of rows from user
n=int(input("Enter the valueof n\n"))                        #input no of columns from user
print("Before add dirt")                                     #print 'Before add dirt'
arr =[[0 for p in range(n)] for q in range(m)]               #Initialise the matrix as zero matrix
for _ in arr:                                                #for loop for rows
    for z in _:                                              #for loop for columns
        print(z,end=" ")                                     #print with new line
    print()                                                  #print the matrix
for a in range(10):                                          #for loop iterating 10 times
    i=random.randint(0,m-1)                                  #Choose a random row
    j=random.randint(0,n-1)                                  #Choose a random column
    arr[i][j]+=1                                             #increment the dirt value by 1 if we visit the same grid again
print("After add dirt")                                      #print 'After add dirt'
for _ in arr:                                                #for loop for rows
    for z in _:                                              #for loop for columns
        print(z,end=" ")                                     #print with new line
    print()                                                  #print the matrix
x=random.randint(0,m-1)                                      #Choose a random row for robot
y=random.randint(0,n-1)                                      #Choose a random column for robot
print(f"The initial location of the agent is ({x},{y})")     #print initial location of the robot
act=["up","𝑑𝑜𝑤𝑛","𝑟𝑖𝑔ℎ𝑡","𝑙𝑒𝑓𝑡","𝑝𝑖𝑐𝑘𝐷𝑖𝑟𝑡"]                    #Make a list of actions
R=0                                                          #Initialise score = 0
def pos_R(action):                                           #Declare function named pos_R which return position and score
    global x,y,R                                             #globalise the variable x, y and R
    if action == "up":                                       #if condition - if robot goes up
        if(x==0):                                            #if x coordinate of robot is 0
            print(f"The agent hits a wall so location of the agent is ({x},{y})") #print robot hits wall
            print("penalty obtained is 10")                  #print 'penalty obtained is 10'
            R=R-10                                           #Score is decremented by 10
            print(f"Score is {R}")                           #print new score
            for _ in arr:                                    #for loop for rows
                for z in _:                                  #for loop for columns
                    print(z,end=" ")                         #print with new line
                print()                                      #print the matrix
            return R,(x,y)                                   #return the score and new postiton
        else:                                                #else condition - if x coordinate of robot is not 0
            x-=1                                             #decrement the x coordinate by 1 after robot goes up
            print(f"The location of the agent is ({x},{y})") #print the new location of robot
            print("reward obtained is 0")                    #print 'reward obtained is 0'
            print(f"Score is {R}")                           #print the new score
            for _ in arr:                                    #for loop for rows
                for z in _:                                  #for loop for columns
                    print(z,end=" ")                         #print with new line
                print()                                      #print the matrix
            return R, (x,y)                                  #return the score and new postiton
    elif action == "𝑑𝑜𝑤𝑛":                                   #else if action is down
        if(x==m-1):                                          #if x coordinate of robot is at the lowest row
            print(f"The agent hits a wall so location of the agent is ({x},{y})") #print robot hits wall
            print("penalty obtained is 10")                  #print 'penalty obtained is 10'
            R=R-10                                           #Score is decremented by 10
            print(f"Score is {R}")                           #print new score
            for _ in arr:                                    #for loop for rows
                for z in _:                                  #for loop for columns
                    print(z,end=" ")                         #print with new line
                print()                                      #print the matrix
            return R, (x,y)                                  #return the score and new postiton
        else:                                                #else condition - if robot is not at the bottom row
            x+=1                                             #increment the x coordinate by 1 after robot goes d𝑜𝑤𝑛
            print(f"The location of the agent is ({x},{y})") #print the new location of robot
            print("reward obtained is 0")                    #print 'reward obtained is 0'
            print(f"Score is {R}")                           #print the new score
            for _ in arr:                                    #for loop for rows
                for z in _:                                  #for loop for columns
                    print(z,end=" ")                         #print with new line
                print()                                      #print the matrix
            return R, (x,y)                                  #return the score and new postiton
    elif action == "𝑟𝑖𝑔ℎ𝑡":                                   #else if action is 𝑟𝑖𝑔ℎ𝑡
        if(y==n-1):                                          #if y coordinate of robot is at the rightmost column
            print(f"The agent hits a wall so location of the agent is ({x},{y})") #print robot hits wall
            print("penalty obtained is 10")                  #print 'penalty obtained is 10'
            R=R-10                                           #Score is decremented by 10
            print(f"Score is {R}")                           #print new score
            for _ in arr:                                    #for loop for rows
                for z in _:                                  #for loop for columns
                    print(z,end=" ")                         #print with new line
                print()                                      #print the matrix
            return R, (x,y)                                  #return the score and new postiton
        else:                                                #else condition - if robot is not at the bottom row
            y+=1                                             #increment the y coordinate by 1 after robot goes right
            print(f"The location of the agent is ({x},{y})") #print the new location of robot
            print("reward obtained is 0")                    #print 'reward obtained is 0'
            print(f"Score is {R}")                           #print the new score
            for _ in arr:                                    #for loop for rows
                for z in _:                                  #for loop for columns
                    print(z,end=" ")                         #print with new line
                print()                                      #print the matrix
            return R, (x,y)                                  #return the score and new postiton
    elif action == "𝑙𝑒𝑓𝑡":                                    #else if action is left
        if(y==0):                                            #if y coordinate of robot is at the leftmost column
            print(f"The agent hits a wall so location of the agent is ({x},{y})") #print robot hits wall
            print("penalty obtained is 10")                  #print 'penalty obtained is 10'
            R=R-10                                           #Score is decremented by 10
            print(f"Score is {R}")                           #print new score
            for _ in arr:                                    #for loop for rows
                for z in _:                                  #for loop for columns
                    print(z,end=" ")                         #print with new line
                print()                                      #print the matrix
            return R, (x,y)                                  #return the score and new postiton
        else:                                                #else if the robot does not move to the left
            y-=1                                             #increment the y coordinate by 1 after robot goes 𝑙𝑒𝑓𝑡
            print(f"The location of the agent is ({x},{y})") #print the new location of robot
            print("reward obtained is 0")                    #print 'reward obtained is 0'
            print(f"Score is {R}")                           #print the new score
            for _ in arr:                                    #for loop for rows
                for z in _:                                  #for loop for columns
                    print(z,end=" ")                         #print with new line
                print()                                      #print the matrix
            return R, (x,y)                                  #return the score and new postiton
    elif action == "𝑝𝑖𝑐𝑘𝐷𝑖𝑟𝑡":                                #else if action istries to pick dirt -
        if(arr[x][y]==0):                                    #if the value of dirt = 0
            print(f"The agent tries to pick dirt but it is a clean cell so location of the agent is ({x},{y})") #print
            print("penalty obtained is 1")                   #print 'penalty obtained is 1'
            R=R-1                                            #Score is decremented by 10
            print(f"Score is {R}")                           #print the new score
            for _ in arr:                                    #for loop for rows
                for z in _:                                  #for loop for columns
                    print(z,end=" ")                         #print with new line
                print()                                      #print the matrix
            return R, (x,y)                                  #return the score and new postiton
        else:                                                #else if action is to pick dirt
            print(f"The agent picks {arr[x][y]} ammount of dirt and location of the agent is ({x},{y})") #print
            print(f"reward obtained is {arr[x][y]}")         #print 'penalty obtained is 1'
            R=R+arr[x][y]                                    #Score is incremented by the value of dirt
            print(f"Score is {R}")                           #print the new score
            arr[x][y]=0                                      #make the dirt avlue of a grid after removin dirt
            for _ in arr:                                    #for loop for rows
                for z in _:                                  #for loop for columns
                    print(z,end=" ")                         #print with new line
                print()                                      #print the matrix
            return R, (x,y)                                  #return the score and new postiton
choosen_action=random.choice(act)                            #choose a random action
print(f"Choosen action is {choosen_action}")                 #print the choosen function
result=pos_R(choosen_action)                                 #Call the function pos_R
print(result)                                                #print the finalscore and location of robot